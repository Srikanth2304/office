package com.sc.wrb.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "caseformdata")
public class EnquiryData {

    @Id
    @Column(name = "caseid")
    private String caseId;

    @Column(name = "processid")
    private String processId;

    @Column(name = "countrycode")
    private String countryCode;

    @Column(name = "formdata")
    private String formData;


    public String getCaseId() {
        return caseId;
    }

    public void setCaseId(String caseId) {
        this.caseId = caseId;
    }


    public String getProcessId() {
        return processId;
    }

    public void setProcessId(String processId) {
        this.processId = processId;
    }


    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }


    public String getFormData() {
        return formData;
    }

    public void setFormData(String formData) {
        this.formData = formData;
    }


    public EnquiryData() {
    }


    public EnquiryData(String caseId, String processId, String countryCode, String formData) {
        this.caseId = caseId;
        this.processId = processId;
        this.countryCode = countryCode;
        this.formData = formData;
    }

    @Override
    public String toString() {
        return "EnquiryData{" +
                "caseId='" + caseId + '\'' +
                ", processId='" + processId + '\'' +
                ", countryCode='" + countryCode + '\'' +
                ", formData='" + formData + '\'' +
                '}';
    }
}



package com.sc.wrb.dto;

import java.util.List;

public class EnquiryValidationResponse {
    private boolean valid;
    private List<String> caseIds;

    // ✅ No-args constructor (required by Spring)
    public EnquiryValidationResponse() {}

    // ✅ All-args constructor
    public EnquiryValidationResponse(boolean valid, List<String> caseIds) {
        this.valid = valid;
        this.caseIds = caseIds;
    }

    // ✅ Getters and setters
    public boolean isValid() {
        return valid;
    }

    public void setValid(boolean valid) {
        this.valid = valid;
    }

    public List<String> getCaseIds() {
        return caseIds;
    }

    public void setCaseIds(List<String> caseIds) {
        this.caseIds = caseIds;
    }
}

package com.sc.wrb.controller;


import com.sc.wrb.dto.EnquiryValidationResponse;
import com.sc.wrb.service.inter.EnquiryDataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

@RestController
@RequestMapping("/api/enquiry")
@CrossOrigin(origins = "*")
public class EnquiryDataController {

    @Autowired
    private EnquiryDataService enquiryDataService;

    @GetMapping("/validate")
    public ResponseEntity<?> validateProcess(
            @RequestParam String processId,
            @RequestParam String countryCode
    ) {
        try {
            EnquiryValidationResponse response = enquiryDataService.validateProcess(processId, countryCode);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));
        }
    }

    @GetMapping("/form-data")
    public ResponseEntity<?> getFormData(
            @RequestParam String processId,
            @RequestParam String countryCode,
            @RequestParam String caseId
    ) {
        try {
            Map<String, Object> data = enquiryDataService.getFormData(processId, countryCode, caseId);
            return ResponseEntity.ok(data);
        } catch (Exception e) {
            return ResponseEntity.internalServerError().body(Map.of("error", e.getMessage()));
        }
    }
}

package com.sc.wrb.repository;

import com.sc.wrb.model.EnquiryData;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;
import java.util.Optional;

public interface EnquiryDataRepository extends JpaRepository<EnquiryData, Long> {
    List<EnquiryData> findByProcessIdAndCountryCode(String processId, String countryCode);
    Optional<EnquiryData> findByProcessIdAndCountryCodeAndCaseId(String processId, String countryCode, String caseId);
}

package com.sc.wrb.service.impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sc.wrb.dto.EnquiryValidationResponse;
import com.sc.wrb.model.EnquiryData;
import com.sc.wrb.repository.EnquiryDataRepository;
import com.sc.wrb.service.inter.EnquiryDataService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class EnquiryDataServiceImpl implements EnquiryDataService {

    @Autowired
    private EnquiryDataRepository repository;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public EnquiryValidationResponse validateProcess(String processId, String countryCode) {
        try {
            List<EnquiryData> results = repository.findByProcessIdAndCountryCode(
                    processId.trim(), countryCode.trim());

            boolean valid = !results.isEmpty();
            List<String> caseIds = results.stream()
                    .map(EnquiryData::getCaseId)
                    .collect(Collectors.toList());

            return new EnquiryValidationResponse(valid, caseIds);
        } catch (Exception e) {
            throw new RuntimeException("Validation failed: " + e.getMessage(), e);
        }
    }

    @Override
    public Map<String, Object> getFormData(String processId, String countryCode, String caseId) {
        try {
            Optional<EnquiryData> record = repository.findByProcessIdAndCountryCodeAndCaseId(
                    processId.trim(), countryCode.trim(), caseId.trim());

            if (record.isEmpty()) {
                throw new RuntimeException("No data found for given input.");
            }

            String json = record.get().getFormData();
            return objectMapper.readValue(json, Map.class);

        } catch (Exception e) {
            throw new RuntimeException("Error fetching form data: " + e.getMessage(), e);
        }
    }
}

package com.sc.wrb.service.inter;

import com.sc.wrb.dto.EnquiryValidationResponse;
import java.util.Map;

public interface EnquiryDataService {
    EnquiryValidationResponse validateProcess(String processId, String countryCode);
    Map<String, Object> getFormData(String processId, String countryCode, String caseId);
}
