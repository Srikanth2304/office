package com.example.service.impl;

import com.example.dto.EnquiryValidationResponse;
import com.example.model.EnquiryData;
import com.example.repository.EnquiryDataRepository;
import com.example.service.EnquiryDataService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;

@Service
public class EnquiryDataServiceImpl implements EnquiryDataService {

    @Autowired
    private EnquiryDataRepository repository;

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    public EnquiryValidationResponse validateProcess(String processId, String countryCode) {
        try {
            List<EnquiryData> results = repository.findByProcessIdAndCountryCode(processId.trim(), countryCode.trim());
            boolean valid = !results.isEmpty();
            List<String> caseIds = results.stream().map(EnquiryData::getCaseId).collect(Collectors.toList());
            return new EnquiryValidationResponse(valid, caseIds);
        } catch (Exception e) {
            throw new RuntimeException("Error validating process: " + e.getMessage(), e);
        }
    }

    @Override
    public Map<String, Object> getFormData(String processId, String countryCode, String caseId) {
        try {
            Optional<EnquiryData> optional = repository.findByProcessIdAndCountryCodeAndCaseId(
                    processId.trim(), countryCode.trim(), caseId.trim());

            if (optional.isEmpty()) {
                throw new RuntimeException("Case not found.");
            }

            String formDataJson = optional.get().getFormData();
            return objectMapper.readValue(formDataJson, Map.class);
        } catch (Exception e) {
            throw new RuntimeException("Error fetching form data: " + e.getMessage(), e);
        }
    }
}
