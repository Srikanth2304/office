import React, { useRef, useState, useEffect } from 'react';
import '@scdevkit/form/elements/form-editor.js';
import '@scdevkit/form/elements/sc-button.js';
import '@scdevkit/form/elements/sc-text-input.js';

const Draft = () => {
  const formEditorRef = useRef(null);
  const [processId, setProcessId] = useState('');
  const [stepName, setStepName] = useState('');
  const [editorReady, setEditorReady] = useState(false);

  useEffect(() => {
    // Wait for the custom element to be ready
    customElements.whenDefined('sc-form-editor').then(() => {
      setEditorReady(true);
    });
  }, []);

  const handleSubmit = async () => {
    if (!processId || !stepName || !editorReady || !formEditorRef.current) {
      console.log('Missing required input or form editor is not ready');
      return;
    }

    const editor = formEditorRef.current;

    // Wait for internal methods to be available
    const code = await editor.getCode?.();
    const data = await editor.getData?.();

    if (!code || !data) {
      console.log('Editor is not ready or returned empty code/data');
      return;
    }

    const combined = { code, data };
    const escapedForm = JSON.stringify(combined).replace(/"/g, '\\"');

    const query = `mutation {
      saveStepFormDefinition(
        processId: "${processId}",
        stepName: "${stepName}",
        form: "${escapedForm}"
      )
    }`;

    console.log('Payload:', combined);
    console.log('GraphQL Query:', query);
  };

  return (
    <div style={{ padding: '24px' }}>
      {/* Process ID Input */}
      <div style={{ padding: '20px 30px' }}>
        <sc-text-input
          label="Process ID"
          placeholder="Enter Process ID"
          value={processId}
          onInput={(e) => setProcessId(e.target.value)}
        ></sc-text-input>
      </div>

      {/* Step Name Input */}
      <div style={{ padding: '20px 30px' }}>
        <sc-text-input
          label="Step Name"
          placeholder="Enter Step Name"
          value={stepName}
          onInput={(e) => setStepName(e.target.value)}
        ></sc-text-input>
      </div>

      {/* Submit Button */}
      <div style={{ padding: '20px 30px' }}>
        <sc-button
          type="primary"
          state="default"
          size="sm"
          width="auto"
          onClick={handleSubmit}
        >
          Submit
        </sc-button>
      </div>

      {/* Form Editor */}
      <sc-form-editor ref={formEditorRef}></sc-form-editor>
    </div>
  );
};

export default Draft;
