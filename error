import React,{ useContext } from 'react';
import { 
    GraphQLClientContext,RestClientContext
} from '@scdevkit/service-bench-core/react/context.js';
// import {
//     createContext as createDataContext,
//     contexts as dataContexts,
// } from '@scdevkit/data';

const serviceCall = async (queryStr) => {
    const graphQLClient = useContext(GraphQLClientContext);
    const restClient = useContext(RestClientContext);
    let response = await graphQLClient.query(queryStr);
    const data = await response.json();
    console.log(data);
    console.log(restClient); // Assuming you want to log the get method of the restClient;
    return data; // BEGIN: return data
} // END: return data

const serviceCallwithcontext = async (queryStr,graphQLClient) => {

    let response = await graphQLClient.query(queryStr);
    const data = await response.json();
    console.log(data);
   return data; // BEGIN: return data
} // END: return data
export {serviceCall,serviceCallwithcontext}


class CaseData {
    constructor(caseId, processId, countryCode,formData) {
      this.caseId = caseId;
      this.processId = processId;
      this.countryCode = countryCode;
      this.formData = formData;
    }
  
    isValid() {
      return this.caseId !== '' && this.countryCode !== '' && this.processId !== '' && this.formData !== '';
    }
  
    getDetails() {
      //return `{companyCode: "${this.companyCode}", countryCode: "${this.countryCode}", processId: "${this.processId}", channel: "${this.channel}", stationId: "${this.stationId}"}`;
      return `caseId: "${this.caseId}", processId: "${this.processId}", countryCode: "${this.countryCode}", formData: ${JSON.stringify(JSON.stringify(this.formData))}`;
    }
  }
  
  export default CaseData; 

class CaseTask {
    constructor(user, country, client,trackingId,caseType,atomBody) {
      this.user = user;
      this.country = country;
      this.client = client;
      this.trackingId = trackingId;
      this.caseType = caseType;
      this.atomBody = atomBody;
    }
  
    isValid() {
      return this.user !== '' && this.country !== '' && this.client !== '' && this.trackingId !== '' && this.caseType !== '' && this.atomBody !== '';
    }
  
    getDetails() {
      //return `{companyCode: "${this.companyCode}", countryCode: "${this.countryCode}", processId: "${this.processId}", channel: "${this.channel}", stationId: "${this.stationId}"}`;
      return `user: "${this.user}", country: "${this.country}", client: "${this.client}", trackingId: "${this.trackingId}", caseType: "${this.caseType}", atomBody: ${JSON.stringify(this.atomBody)}`;
    }
  }
  
  export default CaseTask; 

class ProcessData {
    constructor(companyCode, countryCode, processId,channel,stationId) {
      this.companyCode = companyCode;
      this.countryCode = countryCode;
      this.processId = processId;
      this.channel = channel;
      this.stationId = stationId;
    }
  
    isValid() {
      return this.companyCode !== '' && this.emacountryCodeil !== '' && this.processId !== '' && this.channel !== '' && this.stationId !== '';
    }
  
    getDetails() {
      //return `{companyCode: "${this.companyCode}", countryCode: "${this.countryCode}", processId: "${this.processId}", channel: "${this.channel}", stationId: "${this.stationId}"}`;
      return `companyCode: "${this.companyCode}", countryCode: "${this.countryCode}", processId: "${this.processId}", channel: "${this.channel}", stationId: "${this.stationId}"`;
    }
  }
  
  export default ProcessData; 
