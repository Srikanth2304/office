import React, { useRef, useState, useEffect } from 'react';
import '@scdevkit/form/elements/form-editor.js';

const Draft = () => {
  const formEditorRef = useRef(null);

  const [processId, setProcessId] = useState('');
  const [stepName, setStepName] = useState('');
  const [editorReady, setEditorReady] = useState(false);

  useEffect(() => {
    customElements.whenDefined('sc-form-editor').then(() => {
      setEditorReady(true);
    });
  }, []);

  // SUBMIT: Save current editor content to backend
  const handleSubmit = async () => {
    if (!processId || !stepName || !editorReady || !formEditorRef.current) {
      console.log('Missing required input or form editor not ready');
      return;
    }

    const editor = formEditorRef.current;

    const code = await editor.getCode();
    const data = await editor.getData();

    const combined = { code, data };
    const escapedForm = JSON.stringify(combined).replace(/"/g, '\\"');

    const query = `mutation {
      saveStepFormDefinition(
        processId: "${processId}",
        stepName: "${stepName}",
        form: "${escapedForm}"
      )
    }`;

    console.log('Payload:', combined);
    console.log('GraphQL Query:', query);
  };

  // FETCH: Load form from backend into editor
  const handleFetch = async () => {
    if (!processId || !stepName || !editorReady || !formEditorRef.current) {
      console.log('Missing required input or form editor not ready');
      return;
    }

    const query = `{
      getForm(processId: "${processId}", stepName: "${stepName}") {
        stepFormMappingDTO {
          form
        }
      }
    }`;

    try {
      const response = await fetch('/graphql', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query }),
      });

      const result = await response.json();
      const rawFormString = result.data.getForm.stepFormMappingDTO.form;
      const parsedForm = JSON.parse(rawFormString);

      await formEditorRef.current.setCode(parsedForm);
      console.log('Form loaded into editor');
    } catch (err) {
      console.error('Error fetching form:', err);
    }
  };

  return (
    <div style={{ padding: '24px' }}>
      {/* Inputs */}
      <div style={{ marginBottom: '16px' }}>
        <input
          type="text"
          placeholder="Process ID"
          value={processId}
          onChange={(e) => setProcessId(e.target.value)}
          style={{ padding: '6px 12px', marginRight: '12px' }}
        />
        <input
          type="text"
          placeholder="Step Name"
          value={stepName}
          onChange={(e) => setStepName(e.target.value)}
          style={{ padding: '6px 12px', marginRight: '12px' }}
        />
        <button
          onClick={handleSubmit}
          style={{
            padding: '8px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            marginRight: '10px'
          }}
        >
          Submit
        </button>
        <button
          onClick={handleFetch}
          style={{
            padding: '8px 20px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer'
          }}
        >
          Fetch
        </button>
      </div>

      {/* Editor */}
      <sc-form-editor ref={formEditorRef}></sc-form-editor>
    </div>
  );
};

export default Draft;
