import React, { useState, useRef, useEffect } from 'react';

const Enquiry = () => {
  const [processId, setProcessId] = useState('');
  const [countryCode, setCountryCode] = useState('');
  const [caseId, setCaseId] = useState('');
  const [formData, setFormData] = useState(null);
  const [isValidated, setIsValidated] = useState(false);
  const gridRef = useRef(null);

  const validateProcess = async () => {
    try {
      const response = await fetch(
        `http://localhost:6666/api/enquiry/validate?processId=${processId}&countryCode=${countryCode}`
      );
      const data = await response.json();

      if (data.valid) {
        setIsValidated(true);
      } else {
        alert('Invalid Process ID or Country Code');
      }
    } catch (error) {
      console.error('Error validating process:', error);
      alert('Validation failed. Check console.');
    }
  };

  const searchData = async () => {
    try {
      const response = await fetch(
        `http://localhost:6666/api/enquiry/form-data?processId=${processId}&countryCode=${countryCode}&caseId=${caseId}`
      );
      const data = await response.json();
      setFormData(data);
    } catch (error) {
      console.error('Error fetching form data:', error);
      alert('Error fetching form data. Check console.');
      setFormData(null);
    }
  };

  const resetForm = () => {
    setProcessId('');
    setCountryCode('');
    setCaseId('');
    setFormData(null);
    setIsValidated(false);
  };

  useEffect(() => {
    if (formData && gridRef.current) {
      const columns = Object.keys(formData).map((key) => ({
        property: key,
        header: key,
        minSize: Math.max(100, key.length * 10),
        enableResizing: true,
      }));

      const row = { ...formData };

      gridRef.current.data = [row];
      gridRef.current.columns = columns;
    }
  }, [formData]);

  return (
    <div style={{ padding: '20px 30px', fontFamily: 'Arial' }}>
      {/* ðŸ”¹ Process ID and Country Code */}
      <div
        style={{
          border: '1px solid #ccc',
          borderRadius: '8px',
          padding: '16px',
          marginBottom: '20px',
          backgroundColor: '#fff',
          display: 'flex',
          alignItems: 'flex-end',
          gap: '16px',
          flexWrap: 'wrap',
        }}
      >
        <div style={{ width: '250px' }}>
          <sc-text-input
            label="Process ID"
            value={processId}
            border-type="box"
            style={{ '--sc-border-color': '#68ABF2' }}
            onInput={(e) => setProcessId(e.target.value)}
          ></sc-text-input>
        </div>

        <div style={{ width: '250px' }}>
          <sc-text-input
            label="Country Code"
            value={countryCode}
            border-type="box"
            style={{ '--sc-border-color': '#68ABF2' }}
            onInput={(e) => setCountryCode(e.target.value)}
          ></sc-text-input>
        </div>

        <div style={{ display: 'flex', gap: '10px', alignItems: 'center', paddingBottom: '4px' }}>
          <sc-button type="primary" size="sm" width="auto" onClick={validateProcess}>
            Validate
          </sc-button>

          <sc-button type="primary" size="sm" width="auto" onClick={resetForm}>
            Reset
          </sc-button>
        </div>
      </div>

      {/* ðŸ”¹ Case ID and Search */}
      {isValidated && (
        <div
          style={{
            border: '1px solid #ccc',
            borderRadius: '8px',
            padding: '16px',
            marginBottom: '20px',
            backgroundColor: '#fff',
            display: 'flex',
            alignItems: 'flex-end',
            gap: '16px',
            flexWrap: 'wrap',
          }}
        >
          <div style={{ width: '250px' }}>
            <sc-text-input
              label="Case ID"
              value={caseId}
              border-type="box"
              style={{ '--sc-border-color': '#68ABF2' }}
              onInput={(e) => setCaseId(e.target.value)}
            ></sc-text-input>
          </div>

          <div style={{ paddingBottom: '4px' }}>
            <sc-button type="primary" size="sm" width="auto" onClick={searchData}>
              Search
            </sc-button>
          </div>
        </div>
      )}

      {/* ðŸ”¹ Data Grid Table */}
      {formData && (
        <sc-card
          style="
            margin: 0;
            padding: 20px;
            border: 1px solid #ccc;
            background-color: #f9f9f9;
          "
        >
          <div style={{ overflowX: 'auto' }}>
            <sc-data-grid
              ref={gridRef}
              style="width: 100%; min-width: max-content;"
            ></sc-data-grid>
          </div>
        </sc-card>
      )}
    </div>
  );
};

export default Enquiry;
