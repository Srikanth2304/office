import React, { useRef, useState, useEffect, useContext } from 'react';
import '@scdevkit/form/elements/form-editor.js';
import { serviceCall } from '../service/apiService';
import { GraphQLClientContext } from '@scdevkit/service-bench-core/react/context.js';

const Draft = () => {
  const formEditorRef = useRef(null);
  const [processId, setProcessId] = useState('');
  const [stepName, setStepName] = useState('');
  const [editorReady, setEditorReady] = useState(false);
  const graphQLClient = useContext(GraphQLClientContext);

  // Ensure the custom element is ready before interacting with it
  useEffect(() => {
    customElements.whenDefined('sc-form-editor').then(() => {
      setEditorReady(true);
    });
  }, []);

  // Handle form submission to backend
  const handleSubmit = async () => {
    if (!processId || !stepName || !editorReady || !formEditorRef.current) {
      console.log('Input missing or editor not ready');
      return;
    }

    const editor = formEditorRef.current;
    const code = await editor.getCode();
    const data = await editor.getData();

    const form = { code, data };
    const escapedForm = JSON.stringify(form).replace(/"/g, '\\"');

    const query = `mutation {
      saveStepFormDefinition(
        processId: "${processId}",
        stepName: "${stepName}",
        form: "${escapedForm}"
      )
    }`;

    await serviceCall(query);
    console.log('Submitted form:', form);
  };

  // Fetch form from backend and load into editor
  const handleFetch = async () => {
    if (!processId || !stepName || !editorReady || !formEditorRef.current) {
      console.log('Input missing or editor not ready');
      return;
    }

    const query = `{
      getForm(processId: "${processId}", stepName: "${stepName}") {
        stepFormMappingDTO {
          form
        }
      }
    }`;

    const result = await serviceCall(query);
    const rawForm = result?.data?.getForm?.stepFormMappingDTO?.form;

    if (rawForm) {
      const parsed = JSON.parse(rawForm);
      await formEditorRef.current.setCode(parsed.code || parsed); // Fallback in case only code is stored
      console.log('Loaded form into editor');
    }
  };

  return (
    <div style={{ padding: '24px' }}>
      {/* Input Section */}
      <div style={{ marginBottom: '16px' }}>
        <input
          type="text"
          placeholder="Process ID"
          value={processId}
          onChange={(e) => setProcessId(e.target.value)}
          style={{ padding: '6px 12px', marginRight: '12px' }}
        />
        <input
          type="text"
          placeholder="Step Name"
          value={stepName}
          onChange={(e) => setStepName(e.target.value)}
          style={{ padding: '6px 12px', marginRight: '12px' }}
        />
        <button
          onClick={handleSubmit}
          style={{
            padding: '8px 20px',
            backgroundColor: '#007bff',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            marginRight: '10px',
            cursor: 'pointer',
          }}
        >
          Submit
        </button>
        <button
          onClick={handleFetch}
          style={{
            padding: '8px 20px',
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
          }}
        >
          Fetch
        </button>
      </div>

      {/* Editor */}
      <sc-form-editor ref={formEditorRef}></sc-form-editor>
    </div>
  );
};

export default Draft;




<div style="padding: 20px 30px">
  <sc-text-input label="Business justification" tooltip="" tooltip-placement="top" hint="" hint-placement="right" label-size="" value="" placeholder="" rows="5" resizable="false" prefix-icon="" suffix-icon="" suffix-label="" help-text="" border-type="box" max-length="100" success-message="" error-message="" size="md" icon-size="" text-align="left">   
  </sc-text-input>
</div>

<sc-button type="primary" state="default" size="sm" width="auto" left-icon="" right-icon="">
    Default
  </sc-button>
