import React, { useState, useRef, useEffect } from 'react';

// âœ… Tata SCB Web Components
import '@scdevkit/webkit/components/sc-button.js';
import '@scdevkit/webkit/components/sc-text-input.js';
import '@scdevkit/webkit/components/sc-data-grid.js';
import '@scdevkit/webkit/styles/ScGridStyle.js'; // for consistent styling

const Enquiry = () => {
  const [processId, setProcessId] = useState('');
  const [countryCode, setCountryCode] = useState('');
  const [caseId, setCaseId] = useState('');
  const [formData, setFormData] = useState(null);
  const [isValidated, setIsValidated] = useState(false);
  const gridRef = useRef(null);

  // âœ… Dummy Data Simulating DB
  const dummyDB = [
    {
      caseId: 'SCB1234',
      processId: 'W409',
      countryCode: 'ID',
      formData: '{"id":"name","value":"kiran"}',
    },
    {
      caseId: 'LONG123',
      processId: 'W409',
      countryCode: 'ID',
      formData: JSON.stringify({
        field1: 'value1',
        field2: 'value2',
        field3: 'value3',
        field4: 'value4',
        field5: 'value5',
        field6: 'value6',
        field7: 'value7',
        field8: 'value8',
        field9: 'value9',
        field10: 'value10',
        field11: 'value11',
        field12: 'value12',
        field13: 'value13',
        field14: 'value14',
        field15: 'value15',
      }),
    },
  ];

  // âœ… Validate Process ID + Country Code
  const validateProcess = () => {
    const exists = dummyDB.some(
      (entry) =>
        entry.processId === processId.trim() &&
        entry.countryCode === countryCode.trim()
    );
    setIsValidated(exists);
    if (!exists) {
      alert('Invalid Process ID or Country Code');
    }
  };

  // âœ… Search Case ID
  const searchData = () => {
    const record = dummyDB.find(
      (entry) =>
        entry.processId === processId.trim() &&
        entry.countryCode === countryCode.trim() &&
        entry.caseId === caseId.trim()
    );

    if (record) {
      try {
        const parsed = JSON.parse(record.formData);
        setFormData(parsed);
      } catch {
        alert('Invalid JSON in formData');
      }
    } else {
      alert('Case ID not found');
      setFormData(null);
    }
  };

  // âœ… Set data & columns into sc-data-grid
  useEffect(() => {
    if (formData && gridRef.current) {
      const columns = Object.keys(formData).map((key) => ({
        property: key,
        header: key,
        flex: 1,
      }));

      const row = { ...formData };

      gridRef.current.data = [row];
      gridRef.current.columns = columns;
    }
  }, [formData]);

  return (
    <div style={{ padding: '20px 30px', fontFamily: 'Arial' }}>
      {/* ğŸ”· Process ID Input */}
      <sc-text-input
        label="Process ID"
        value={processId}
        placeholder="Enter Process ID"
        border-type="box"
        style={{ marginBottom: '12px', '--sc-border-color': '#68ABF2' }}
        onInput={(e) => setProcessId(e.target.value)}
      ></sc-text-input>

      {/* ğŸ”· Country Code Input */}
      <sc-text-input
        label="Country Code"
        value={countryCode}
        placeholder="Enter Country Code"
        border-type="box"
        style={{ marginBottom: '12px', '--sc-border-color': '#68ABF2' }}
        onInput={(e) => setCountryCode(e.target.value)}
      ></sc-text-input>

      {/* ğŸ”· Validate Button */}
      <sc-button
        type="primary"
        size="sm"
        width="auto"
        style="margin-bottom: 20px;"
        onClick={validateProcess}
      >
        Validate
      </sc-button>

      {/* ğŸ”· Case ID Section */}
      {isValidated && (
        <>
          <sc-text-input
            label="Case ID"
            value={caseId}
            placeholder="Enter Case ID"
            border-type="box"
            style={{ marginBottom: '12px', '--sc-border-color': '#68ABF2' }}
            onInput={(e) => setCaseId(e.target.value)}
          ></sc-text-input>

          <sc-button
            type="primary"
            size="sm"
            width="auto"
            style="margin-bottom: 20px;"
            onClick={searchData}
          >
            Search
          </sc-button>
        </>
      )}

      {/* ğŸ”· Dynamic Grid Section */}
      {formData && (
        <sc-data-grid
          ref={gridRef}
          style="margin-top: 20px; width: 100%; overflow-x: auto"
        ></sc-data-grid>
      )}
    </div>
  );
};

export default Enquiry;
