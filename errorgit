import React, { useState, useRef } from 'react';

const dummyDB = [
  {
    caseId: 'SCB1234',
    processId: 'W409',
    countryCode: 'ID',
    formData: '{"id":"name","value":"kiran"}',
  },
  {
    caseId: '123456',
    processId: 'W409',
    countryCode: 'ID',
    formData: '{"name":"Kiran"}',
  },
  {
    caseId: 'LONG123',
    processId: 'W409',
    countryCode: 'ID',
    formData: JSON.stringify({
      field1: 'value1',
      field2: 'value2',
      field3: 'value3',
      field4: 'value4',
      field5: 'value5',
      field6: 'value6',
      field7: 'value7',
      field8: 'value8',
      field9: 'value9',
      field10: 'value10',
      field11: 'value11',
      field12: 'value12',
      field13: 'value13',
      field14: 'value14',
      field15: 'value15',
    }),
  },
];

const Enquiry = () => {
  const [processId, setProcessId] = useState('');
  const [countryCode, setCountryCode] = useState('');
  const [caseId, setCaseId] = useState('');
  const [isValidated, setIsValidated] = useState(false);
  const dataGridRef = useRef(null);

  const validateProcess = () => {
    if (processId.trim() !== '' && countryCode.trim() !== '') {
      setIsValidated(true);
    } else {
      alert('Please enter both Process ID and Country Code.');
    }
  };

  const resetForm = () => {
    setProcessId('');
    setCountryCode('');
    setCaseId('');
    setIsValidated(false);
    if (dataGridRef.current) {
      dataGridRef.current.data = [];
      dataGridRef.current.columns = [];
    }
  };

  const searchData = () => {
    const result = dummyDB.find(
      (entry) =>
        entry.processId === processId &&
        entry.countryCode === countryCode &&
        entry.caseId === caseId
    );

    if (!result) {
      alert('No matching record found.');
      return;
    }

    try {
      const parsedData = JSON.parse(result.formData);
      const columnDefs = Object.keys(parsedData).map((key) => ({
        property: key,
        header: key,
        minSize: 100,
      }));

      if (dataGridRef.current) {
        dataGridRef.current.data = [parsedData];
        dataGridRef.current.columns = columnDefs;
      }
    } catch (err) {
      alert('Invalid JSON in formData.');
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter') {
      searchData();
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      {/* Process ID + Country Code + Buttons */}
      <div style={{ display: 'flex', alignItems: 'flex-end', gap: '16px', marginBottom: '20px', flexWrap: 'wrap' }}>
        <div style={{ display: 'flex', flexDirection: 'column' }}>
          <label>Process ID</label>
          <input
            type="text"
            value={processId}
            onChange={(e) => setProcessId(e.target.value)}
            style={{
              width: '200px',
              padding: '8px',
              border: '1px solid #68ABF2',
              borderRadius: '6px'
            }}
          />
        </div>

        <div style={{ display: 'flex', flexDirection: 'column' }}>
          <label>Country Code</label>
          <input
            type="text"
            value={countryCode}
            onChange={(e) => setCountryCode(e.target.value)}
            style={{
              width: '200px',
              padding: '8px',
              border: '1px solid #68ABF2',
              borderRadius: '6px'
            }}
          />
        </div>

        <sc-button onClick={validateProcess} type="primary" size="sm">Validate</sc-button>
        <sc-button onClick={resetForm} type="primary" size="sm">Reset</sc-button>
      </div>

      {/* Case ID + Search */}
      {isValidated && (
        <div style={{ display: 'flex', alignItems: 'flex-end', gap: '16px', marginBottom: '20px', flexWrap: 'wrap' }}>
          <div style={{ display: 'flex', flexDirection: 'column' }}>
            <label>Case ID</label>
            <input
              type="text"
              value={caseId}
              onChange={(e) => setCaseId(e.target.value)}
              onKeyDown={handleKeyDown}
              style={{
                width: '200px',
                padding: '8px',
                border: '1px solid #68ABF2',
                borderRadius: '6px'
              }}
            />
          </div>

          <sc-button onClick={searchData} type="primary" size="sm">Search</sc-button>
        </div>
      )}

      {/* Data Table Box */}
      <div style={{
        border: '1px solid #ccc',
        borderRadius: '8px',
        padding: '10px',
        overflowX: 'auto',
        maxWidth: '100%'
      }}>
        <sc-data-grid
          ref={dataGridRef}
          style="width: 100%; overflow-x: auto"
        ></sc-data-grid>
      </div>
    </div>
  );
};

export default Enquiry;
