import React, { useState } from 'react';

const Enquiry = () => {
  const [processId, setProcessId] = useState('');
  const [countryCode, setCountryCode] = useState('');
  const [caseId, setCaseId] = useState('');
  const [formData, setFormData] = useState(null);
  const [isValidated, setIsValidated] = useState(false);

  const dummyDB = [
    {
      caseId: 'SCB1234',
      processId: 'W409',
      countryCode: 'ID',
      formData: '{"id":"name","value":"kiran"}',
    },
    {
      caseId: 'LONG123',
      processId: 'W409',
      countryCode: 'ID',
      formData: JSON.stringify({
        field1: 'value1',
        field2: 'value2',
        field3: 'value3',
        field4: 'value4',
        field5: 'value5',
        field6: 'value6',
        field7: 'value7',
        field8: 'value8',
        field9: 'value9',
        field10: 'value10',
        field11: 'value11',
        field12: 'value12',
        field13: 'value13',
        field14: 'value14',
        field15: 'value15',
      }),
    },
  ];

  const validateProcess = () => {
    const exists = dummyDB.some(
      (entry) =>
        entry.processId === processId.trim() &&
        entry.countryCode === countryCode.trim()
    );
    setIsValidated(exists);
    if (!exists) alert('Invalid Process ID or Country Code');
  };

  const searchData = () => {
    const record = dummyDB.find(
      (entry) =>
        entry.processId === processId.trim() &&
        entry.countryCode === countryCode.trim() &&
        entry.caseId === caseId.trim()
    );
    if (record) {
      try {
        const parsed = JSON.parse(record.formData);
        setFormData(parsed);
      } catch {
        alert('Invalid JSON in formData');
      }
    } else {
      alert('Case ID not found');
      setFormData(null);
    }
  };

  const renderDataGrid = () => {
    const columns = Object.keys(formData).map((key) => ({
      property: key,
      header: key,
      flex: 1,
    }));
    const row = {
      ...formData,
    };
    return (
      <sc-data-grid
        .data=${[row]}
        .columns=${columns}
        style="margin-top: 20px; width: 100%; overflow-x: auto"
      ></sc-data-grid>
    );
  };

  return (
    <div style={{ padding: '20px', fontFamily: 'Arial' }}>
      {/* Process ID */}
      <div style={{ padding: '10px 30px' }}>
        <sc-text-input
          label="Process ID"
          value={processId}
          placeholder="Enter Process ID"
          border-type="box"
          max-length="20"
          style={{ marginBottom: '10px', '--sc-border-color': '#68ABF2' }}
          onInput={(e) => setProcessId(e.target.value)}
        ></sc-text-input>

        <sc-text-input
          label="Country Code"
          value={countryCode}
          placeholder="Enter Country Code"
          border-type="box"
          max-length="10"
          style={{ marginBottom: '10px', '--sc-border-color': '#68ABF2' }}
          onInput={(e) => setCountryCode(e.target.value)}
        ></sc-text-input>

        <sc-button
          type="primary"
          size="sm"
          width="auto"
          style="margin-bottom: 20px;"
          onClick={validateProcess}
        >
          Validate
        </sc-button>
      </div>

      {/* Case ID */}
      {isValidated && (
        <div style={{ padding: '10px 30px' }}>
          <sc-text-input
            label="Case ID"
            value={caseId}
            placeholder="Enter Case ID"
            border-type="box"
            max-length="20"
            style={{ marginBottom: '10px', '--sc-border-color': '#68ABF2' }}
            onInput={(e) => setCaseId(e.target.value)}
          ></sc-text-input>

          <sc-button
            type="primary"
            size="sm"
            width="auto"
            style="margin-bottom: 20px;"
            onClick={searchData}
          >
            Search
          </sc-button>
        </div>
      )}

      {/* Data Grid Output */}
      {formData && renderDataGrid()}
    </div>
  );
};

export default Enquiry;
